use std::{
    collections::HashMap,
    io::{stdin, BufRead},
};

pub fn day1_1() {
    let mut left: Vec<i64> = vec![];
    let mut right: Vec<i64> = vec![];
    for line in stdin().lock().lines() {
        if let Ok(line) = line {
            let nums: Vec<i64> = line.split(" ").flat_map(|x| x.parse::<i64>()).collect();
            if nums.len() != 2 {
                break;
            }
            left.push(nums[0]);
            right.push(nums[1]);
        }
    }

    left.sort();
    right.sort();

    assert!(left.len() == right.len());
    let sum: i64 = left
        .iter()
        .zip(right.iter())
        .map(|(l, r)| (l - r).abs())
        .sum();
    println!("{}", sum);
}

pub fn day1_2() {
    let mut left: Vec<i64> = vec![];
    let mut right: HashMap<i64, i64> = HashMap::new();

    for line in stdin().lock().lines() {
        if let Ok(line) = line {
            if line.trim().len() == 0 {
                break;
            }
            let nums: Vec<i64> = line.split(" ").flat_map(|x| x.parse::<i64>()).collect();
            left.push(nums[0]);
            right.entry(nums[1]).and_modify(|x| *x += 1).or_insert(1);
        }
    }

    let mut sum = 0;
    for num in left {
        sum += match right.get(&num) {
            Some(v) => v * num,
            None => 0,
        }
    }

    print!("Result: {}", sum)
}

pub fn day2_1() {
    let mut num_safe_reports = 0;
    for line in stdin().lock().lines() {
        if let Ok(line) = line {
            if line.trim().len() == 0 {
                break;
            }
            let nums: Vec<i64> = line.split(" ").flat_map(|x| x.parse::<i64>()).collect();
            let mut prev_diff = 0;
            let mut safe = true;

            for i in 1..nums.len() {
                let diff = nums[i] - nums[i - 1];
                if diff.abs() > 3 || diff.abs() < 1 {
                    safe = false
                }
                if prev_diff < 0 && diff > 0 {
                    safe = false
                }

                if prev_diff > 0 && diff < 0 {
                    safe = false
                }
                prev_diff = diff
            }
            if safe {
                num_safe_reports += 1
            }
        }
    }

    print!("Result: {}", num_safe_reports)
}

#[derive(Clone, Debug)]
enum Day2SafeState {
    Inc,
    Dec,
    None,
}


fn day2_2_is_safe(
    arr: &Vec<i64>,
    idx: usize,
    prev: i64,
    state: Day2SafeState,
    has_unsafe: bool,
) -> bool {
    println!("{:?} {:?} {:?} {:?} {:?}", idx, prev, state, has_unsafe, arr.len());
    if idx > arr.len() {
        return true;
    }

    let diff = arr[idx] - prev;
    if diff.abs() < 1 || diff.abs() > 3 {
        if has_unsafe {
            return false;
        }
        return day2_2_is_safe(arr, idx + 1, prev, state, true);
    }

    match state.clone() {
        Day2SafeState::Inc if diff < 0 => {
            if has_unsafe {
                return false;
            } else {
                day2_2_is_safe(arr, idx + 1, prev, state, true)
            }
        }
        Day2SafeState::Dec if diff > 0 => {
            if has_unsafe {
                false
            } else {
                day2_2_is_safe(arr, idx + 1, prev, state, true)
            }
        }
        _ => day2_2_is_safe(
            arr,
            idx + 1,
            arr[idx],
            if diff > 0 {
                Day2SafeState::Inc
            } else {
                Day2SafeState::Dec
            },
            has_unsafe,
        ),
    }
}

pub fn day2_2() {
    let mut num_safe_reports = 0;
    for line in stdin().lock().lines() {
        if let Ok(line) = line {
            if line.trim().len() == 0 {
                break;
            }
            let nums: Vec<i64> = line.split(" ").flat_map(|x| x.parse::<i64>()).collect();
            if day2_2_is_safe(&nums, 1, nums[0], Day2SafeState::None, false) {
                println!("Safe");
                num_safe_reports += 1
            } else if nums.len() > 1 && day2_2_is_safe(&nums, 2, nums[1], Day2SafeState::None, true) {
                println!("Safe");
                num_safe_reports += 1
            } else {
                println!("Unsafe");
            }
        }
    }

    println!("Result: {}", num_safe_reports)
}
